// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(uuid())
  name               String
  password           String
  Whiteboard         Whiteboard[] //Owned whiteboards
  SharedWhiteboard   WhiteboardShare[] @relation("SharedWhiteboards")
  ReceivedWhiteboard WhiteboardShare[] @relation("ReceivedWhiteboards")
}

model Whiteboard {
  id       String            @id @default(uuid())
  name     String
  OwnerID  String
  Owner    User              @relation(fields: [OwnerID], references: [id])
  Shares   WhiteboardShare[]
  Drawings Drawing[]
}

model WhiteboardShare {
  id           String     @id @default(uuid())
  name         String
  WhiteboardId String
  whiteboard   Whiteboard @relation(fields: [WhiteboardId], references: [id])
  SharedBy     User       @relation("SharedWhiteboards", fields: [SharerId], references: [id])
  SharerId     String
  SharedWith   User       @relation("ReceivedWhiteboards", fields: [ReceiverId], references: [id])
  ReceiverId   String
  EditAcces    Boolean    @default(false)
  SharedAt     DateTime   @default(now())
}

//Literal drawings on the whiteboards are going to be stored here, like a line, or even a circle
model Drawing {
  id           String     @id @default(uuid())
  name         String
  DrawingData  Json //For storing, well, data sent between users for drawings
  WhiteboardId String
  Whiteboard   Whiteboard @relation(fields: [WhiteboardId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
